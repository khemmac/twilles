
Ext.define('Ext.ux.SWFUpload',{extend:'Ext.Component',requires:['Ext.util.Cookies'],config:{autoStart:true,debugMode:false,targetUrl:'/media/json/upload',fieldName:'mediaFile',swfUrl:'/jslib/SWFUpload/Flash/swfupload.swf',swfUploadCfg:{},relayCookies:false,baseParams:[],progressBar:false,file_size_limit:"16 MB",file_types:'*.jpg; *.jpeg; *.png; *.gif; *.JPG; *.JPEG; *.PNG; *.GIF',file_types_description:'Media',button_width:100,button_height:22,button_image_url:'/img/icons/blank_upload_button.png',scope:null,button_action:SWFUpload.BUTTON_ACTION.SELECT_FILES},constructor:function(config){this.initConfig(config);return this.callParent(arguments);},initComponent:function(){if(!this.relayCookies)
this.relayCookies=['s'];this.errorOccurred=false;this.flashContainerId=Ext.id(null,'swfupload');this.addEvents({'ready':true,'queueError':true,'filesSelected':true,'fileQueued':true,'uploadError':true,'uploadStarted':true,'uploadProgress':true,'uploadComplete':true,'uploadResponse':true,'allUploadsComplete':true});this.callParent(arguments);},onRender:function(container,position){this.callParent(arguments);this.photoUploaderSpan=this.el.createChild({tag:'span',id:this.flashContainerId,style:'margin: 2px'});var params=Ext.apply({},this.baseParams);Ext.each(this.relayCookies,function(cookieName){params[cookieName]=Ext.util.Cookies.get(cookieName)});var config=this.getConfig(params);this.SWFUpload=new SWFUpload(config);},setPostParams:function(params){for(var field in params)
{this.addPostParam(field,params[field]);}},addPostParam:function(field,value)
{this.SWFUpload.addPostParam(field,value);},getConfig:function(params){return Ext.apply({debug:this.debugMode,upload_url:this.targetUrl,file_post_name:this.fieldName,flash_url:this.swfUrl,post_params:params,button_placeholder_id:this.flashContainerId,button_window_mode:SWFUpload.WINDOW_MODE.TRANSPARENT,button_width:this.button_width,button_height:this.button_height,button_image_url:this.button_image_url,button_text_left_padding:20,button_text_top_padding:2,button_action:this.button_action,file_size_limit:this.file_size_limit,file_types:this.file_types,file_types_description:this.types_description,file_upload_limit:"0",swfupload_loaded_handler:Ext.bind(function(){if(false!==this.fireEvent('ready')&&this.progressBar)
{this.progressBar.updateProgress(0,'Ready to upload media',false);this.progressBar.enable();}},this),file_queue_error_handler:Ext.bind(function(file,errorCode,errorMessage){this.errorOccurred=true;if(false!==this.fireEvent('queueError',file,errorCode,errorMessage))
{Ext.Msg.alert('Upload Failed','This file cannot be uploaded:<br><br>'+errorMessage);}},this),upload_error_handler:Ext.bind(function(file,errorCode,errorMessage){this.errorOccurred=true;if(this.debugMode)
{console.log('upload_error_handler',file,errorCode,errorMessage);}
if(false!==this.fireEvent('uploadError',file,errorCode,errorMessage))
{Ext.Msg.alert('Upload Failed','An error occured while uploading your file:<br><br>'+errorMessage);}},this),file_dialog_complete_handler:Ext.bind(function(numFilesSelected,numFilesQueued,queueTotal){this.errorOccurred=false;if(false!==this.fireEvent('filesSelected',numFilesSelected,numFilesQueued,queueTotal)&&this.progressBar)
{if(numFilesQueued)
this.progressBar.updateProgress(0,'Preparing to upload '+queueTotal+(queueTotal>1?' files...':' file...'),false);else
this.progressBar.updateProgress(0,'Ready to upload media',false);}
if(this.autoStart)
{try{if(numFilesSelected>0){this.SWFUpload.startUpload();}}catch(ex){this.SWFUpload.debug(ex);}}},this),file_queued_handler:Ext.bind(function(file){this.fireEvent('fileQueued',file);},this),upload_start_handler:Ext.bind(function(file){if(this.errorOccurred)
{return;}
if(false!==this.fireEvent('uploadStarted',file)&&this.progressBar)
{this.progressBar.updateProgress(0,'Uploading '+file.name,false);}},this),upload_progress_handler:Ext.bind(function(file,bytesLoaded,bytesTotal){if(this.errorOccurred)
{return;}
if(false!==this.fireEvent('uploadProgress',file,bytesLoaded,bytesTotal)&&this.progressBar)
{this.progressBar.updateProgress(bytesLoaded/bytesTotal,'Uploading '+file.name,true);}},this),upload_success_handler:Ext.bind(function(file,responseText,receivedResponse){if(this.errorOccurred)
{return;}
this.fireEvent('uploadResponse',file,responseText,receivedResponse);if(this.debugMode)
{console.log('Received upload response for %s: %o',file.name,responseText);}},this),upload_complete_handler:Ext.bind(function(file){if(this.errorOccurred)
{return;}
if(false!==this.fireEvent('uploadComplete',file)&&this.progressBar)
{this.progressBar.updateProgress(1,'Finished uploading '+file.name,true);this.progressBar.el.frame();}
if(this.SWFUpload.getStats().files_queued==0)
{if(false!==this.fireEvent('allUploadsComplete')&&this.progressBar)
{this.progressBar.updateText('Finished uploading all files.');}}
else
{if(this.autoStart)
{this.SWFUpload.startUpload();}}},this)},this.swfUploadCfg);},getStats:function(){return this.SWFUpload.getStats();},getFile:function(index){return this.SWFUpload.getFile(index);},cancelUpload:function(index,triggerErrorEvent){if(triggerErrorEvent!==false){triggerErrorEvent=true;}
return this.SWFUpload.cancelUpload(index);},startUpload:function(index){return this.SWFUpload.startUpload(index);}});;Ext.define('Ext.ux.ajax.Simlet',function(){var urlRegex=/([^?#]*)(#.*)?$/,dateRegex=/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/,intRegex=/^[+-]?\d+$/,floatRegex=/^[+-]?\d+\.\d+$/;function parseParamValue(value){var m;if(Ext.isDefined(value)){value=decodeURIComponent(value);if(intRegex.test(value)){value=parseInt(value,10);}else if(floatRegex.test(value)){value=parseFloat(value);}else if(!!(m=dateRegex.test(value))){value=new Date(Date.UTC(+m[1],+m[2]-1,+m[3],+m[4],+m[5],+m[6]));}}
return value;}
return{alias:'simlet.basic',isSimlet:true,responseProps:['responseText','responseXML','status','statusText'],status:200,statusText:'OK',constructor:function(config){Ext.apply(this,config);},doGet:function(ctx){var me=this,ret={};Ext.each(me.responseProps,function(prop){if(prop in me){ret[prop]=me[prop];}});return ret;},doRedirect:function(ctx){return false;},exec:function(xhr){var me=this,ret={},method='do'+Ext.String.capitalize(xhr.method.toLowerCase()),fn=me[method];if(fn){ret=fn.call(me,me.getCtx(xhr.method,xhr.url,xhr));}else{ret={status:405,statusText:'Method Not Allowed'};}
return ret;},getCtx:function(method,url,xhr){return{method:method,params:this.parseQueryString(url),url:url,xhr:xhr};},openRequest:function(method,url,options,async){var ctx=this.getCtx(method,url),redirect=this.doRedirect(ctx),xhr;if(redirect){xhr=redirect;}else{xhr=new Ext.ux.ajax.SimXhr({mgr:this.manager,simlet:this,options:options});xhr.open(method,url,async);}
return xhr;},parseQueryString:function(str){var m=urlRegex.exec(str),ret={},key,value,i,n;if(m&&m[1]){var pair,parts=m[1].split('&');for(i=0,n=parts.length;i<n;++i){if((pair=parts[i].split('='))[0]){key=decodeURIComponent(pair.shift());value=parseParamValue((pair.length>1)?pair.join('='):pair[0]);if(!(key in ret)){ret[key]=value;}else if(Ext.isArray(ret[key])){ret[key].push(value);}else{ret[key]=[ret[key],value];}}}}
return ret;},redirect:function(method,url,params){switch(arguments.length){case 2:if(typeof url=='string'){break;}
params=url;case 1:url=method;method='GET';break;}
if(params){url=Ext.urlAppend(url,Ext.Object.toQueryString(params));}
return this.manager.openRequest(method,url);}};}());;Ext.define('Ext.ux.ajax.DataSimlet',function(){function makeSortFn(def,cmp){var order=def.direction,sign=(order&&order.toUpperCase()=='DESC')?-1:1;return function(leftRec,rightRec){var lhs=leftRec[def.property],rhs=rightRec[def.property],c=(lhs<rhs)?-1:((rhs<lhs)?1:0);if(c||!cmp){return c*sign;}
return cmp(leftRec,rightRec);};}
function makeSortFns(defs,cmp){for(var sortFn=cmp,i=defs&&defs.length;i;){sortFn=makeSortFn(defs[--i],sortFn);}
return sortFn;}
return{extend:'Ext.ux.ajax.Simlet',getData:function(ctx){var me=this,data=me.data,params=ctx.params,order=(params.group||'')+'-'+(params.sort||'')+'-'+(params.dir||''),fields,sortFn;if(!order){return data;}
ctx.groupSpec=params.group&&Ext.decode(params.group);if(order==me.currentOrder){return me.sortedData;}
fields=params.sort;if(params.dir){fields=[{direction:params.dir,property:fields}];}else{fields=Ext.decode(params.sort);}
sortFn=makeSortFns((ctx.sortSpec=fields));sortFn=makeSortFns(ctx.groupSpec,sortFn);data=Ext.isArray(data)?data.slice(0):data;if(sortFn){Ext.Array.sort(data,sortFn);}
me.sortedData=data;me.currentOrder=order;return data;},getPage:function(ctx,data){var ret=data,length=data.length,start=ctx.params.start||0,end=ctx.params.limit?Math.min(length,start+ctx.params.limit):length;if(start||end<length){ret=ret.slice(start,end);}
return ret;},getGroupSummary:function(groupField,rows,ctx){return rows[0];},getSummary:function(ctx,data,page){var me=this,groupField=ctx.groupSpec[0].property,accum,todo={},summary=[],fieldValue,lastFieldValue;Ext.each(page,function(rec){fieldValue=rec[groupField];todo[fieldValue]=true;});function flush(){if(accum){summary.push(me.getGroupSummary(groupField,accum,ctx));accum=null;}}
Ext.each(data,function(rec){fieldValue=rec[groupField];if(lastFieldValue!==fieldValue){flush();lastFieldValue=fieldValue;}
if(!todo[fieldValue]){return!summary.length;}
if(accum){accum.push(rec);}else{accum=[rec];}
return true;});flush();return summary;}};}());;Ext.define('Ext.ux.ajax.JsonSimlet',{extend:'Ext.ux.ajax.DataSimlet',alias:'simlet.json',doGet:function(ctx){var me=this,data=me.getData(ctx),page=me.getPage(ctx,data),reader=ctx.xhr.options.proxy&&ctx.xhr.options.proxy.reader,ret=me.callParent(arguments),response={};if(reader&&reader.root){response[reader.root]=page;response[reader.totalProperty]=data.length;}else{response=page;}
if(ctx.groupSpec){response.summaryData=me.getSummary(ctx,data,page);}
ret.responseText=Ext.encode(response);return ret;}});;Ext.define('Ext.ux.ajax.SimXhr',{readyState:0,mgr:null,simlet:null,constructor:function(config){var me=this;Ext.apply(me,config);me.requestHeaders={};},abort:function(){var me=this;if(me.timer){clearTimeout(me.timer);me.timer=null;}
me.aborted=true;},getAllResponseHeaders:function(){var headers=[];Ext.Object.each(this.responseHeaders,function(name,value){headers.push(name+': '+value);});return headers.join('\x0d\x0a');},getResponseHeader:function(header){var headers=this.responseHeaders;return(headers&&headers[header])||null;},open:function(method,url,async,user,password){var me=this;me.method=method;me.url=url;me.async=async!==false;me.user=user;me.password=password;me.setReadyState(1);},overrideMimeType:function(mimeType){this.mimeType=mimeType;},schedule:function(){var me=this;me.timer=setTimeout(function(){me.onTick();},me.mgr.delay);},send:function(body){var me=this;me.body=body;if(me.async){me.schedule();}else{me.onComplete();}},setReadyState:function(state){var me=this;if(me.readyState!=state){me.readyState=state;me.onreadystatechange();}},setRequestHeader:function(header,value){this.requestHeaders[header]=value;},onreadystatechange:Ext.emptyFn,onComplete:function(){var me=this,callback;me.readyState=4;Ext.apply(me,me.simlet.exec(me));callback=me.jsonpCallback;if(callback){var text=callback+'('+me.responseText+')';eval(text);}},onTick:function(){var me=this;me.timer=null;me.onComplete();me.onreadystatechange&&me.onreadystatechange();}});;Ext.define('Ext.ux.ajax.SimManager',{singleton:true,requires:['Ext.data.Connection','Ext.ux.ajax.SimXhr','Ext.ux.ajax.Simlet','Ext.ux.ajax.JsonSimlet'],defaultType:'basic',delay:150,ready:false,constructor:function(){this.simlets={};},getSimlet:function(url){var me=this,index=url.indexOf('?');if(index<0){index=url.indexOf('#');}
if(index>0){url=url.substring(0,index);}
return me.simlets[url]||me.defaultSimlet;},getXhr:function(method,url,options,async){var simlet=this.getSimlet(url);if(simlet){return simlet.openRequest(method,url,options,async);}
return null;},init:function(config){var me=this;Ext.apply(me,config);if(!me.ready){me.ready=true;if(!('defaultSimlet'in me)){me.defaultSimlet=new Ext.ux.ajax.Simlet({status:404,statusText:'Not Found'});}
me._openRequest=Ext.data.Connection.prototype.openRequest;Ext.data.Connection.override({openRequest:function(options,requestOptions,async){var xhr=!options.nosim&&me.getXhr(requestOptions.method,requestOptions.url,options,async);if(!xhr){xhr=this.callParent(arguments);}
return xhr;}});if(Ext.data.JsonP){Ext.data.JsonP.self.override({createScript:function(url,params,options){var fullUrl=Ext.urlAppend(url,Ext.Object.toQueryString(params)),script=!options.nosim&&me.getXhr('GET',fullUrl,options,true);if(!script){script=this.callParent(arguments);}
return script;},loadScript:function(request){var script=request.script;if(script.simlet){script.jsonpCallback=request.params[request.callbackKey];script.send(null);}else{this.callParent(arguments);}}});}}
return me;},openRequest:function(method,url,async){var opt={method:method,url:url};return this._openRequest.call(Ext.data.Connection.prototype,{},opt,async);},register:function(simlet){var me=this;me.init();function reg(one){var simlet=one;if(!simlet.isSimlet){simlet=Ext.create('simlet.'+(simlet.stype||me.defaultType),one);}
me.simlets[one.url]=simlet;simlet.manager=me;}
if(Ext.isArray(simlet)){Ext.each(simlet,reg);}else if(simlet.isSimlet||simlet.url){reg(simlet);}else{Ext.Object.each(simlet,function(url,s){s.url=url;reg(s);});}
return me;}});;Ext.define('Ext.ux.grid.filter.Filter',{extend:'Ext.util.Observable',active:false,dataIndex:null,menu:null,updateBuffer:500,constructor:function(config){Ext.apply(this,config);this.addEvents('activate','deactivate','serialize','update');Ext.ux.grid.filter.Filter.superclass.constructor.call(this);this.menu=this.createMenu(config);this.init(config);if(config&&config.value){this.setValue(config.value);this.setActive(config.active!==false,true);delete config.value;}},destroy:function(){if(this.menu){this.menu.destroy();}
this.clearListeners();},init:Ext.emptyFn,createMenu:function(config){config.plain=true;return Ext.create('Ext.menu.Menu',config);},getValue:Ext.emptyFn,setValue:Ext.emptyFn,isActivatable:function(){return true;},getSerialArgs:Ext.emptyFn,validateRecord:function(){return true;},serialize:function(){var args=this.getSerialArgs();this.fireEvent('serialize',args,this);return args;},fireUpdate:function(){if(this.active){this.fireEvent('update',this);}
this.setActive(this.isActivatable());},setActive:function(active,suppressEvent){if(this.active!=active){this.active=active;if(suppressEvent!==true){this.fireEvent(active?'activate':'deactivate',this);}}}});;Ext.define('Ext.ux.grid.filter.BooleanFilter',{extend:'Ext.ux.grid.filter.Filter',alias:'gridfilter.boolean',defaultValue:false,yesText:'Yes',noText:'No',init:function(config){var gId=Ext.id();this.options=[Ext.create('Ext.menu.CheckItem',{text:this.yesText,group:gId,checked:this.defaultValue===true}),Ext.create('Ext.menu.CheckItem',{text:this.noText,group:gId,checked:this.defaultValue===false})];this.menu.add(this.options[0],this.options[1]);for(var i=0;i<this.options.length;i++){this.options[i].on('click',this.fireUpdate,this);this.options[i].on('checkchange',this.fireUpdate,this);}},getValue:function(){return this.options[0].checked;},setValue:function(value){this.options[value?0:1].setChecked(true);},getSerialArgs:function(){var args={type:'boolean',value:this.getValue()};return args;},validateRecord:function(record){return record.get(this.dataIndex)==this.getValue();}});;Ext.define('Ext.ux.grid.filter.ListFilter',{extend:'Ext.ux.grid.filter.Filter',alias:'gridfilter.list',phpMode:false,init:function(config){this.dt=Ext.create('Ext.util.DelayedTask',this.fireUpdate,this);},createMenu:function(config){var menu=Ext.create('Ext.ux.grid.menu.ListMenu',config);menu.on('checkchange',this.onCheckChange,this);return menu;},getValue:function(){return this.menu.getSelected();},setValue:function(value){this.menu.setSelected(value);this.fireEvent('update',this);},isActivatable:function(){return this.getValue().length>0;},getSerialArgs:function(){return{type:'list',value:this.phpMode?this.getValue().join(','):this.getValue()};},onCheckChange:function(){this.dt.delay(this.updateBuffer);},validateRecord:function(record){var valuesArray=this.getValue();return Ext.Array.indexOf(valuesArray,record.get(this.dataIndex))>-1;}});;Ext.define('Ext.ux.grid.filter.NumericFilter',{extend:'Ext.ux.grid.filter.Filter',alias:'gridfilter.numeric',uses:['Ext.form.field.Number'],createMenu:function(config){var me=this,menu;menu=Ext.create('Ext.ux.grid.menu.RangeMenu',config);menu.on('update',me.fireUpdate,me);return menu;},getValue:function(){return this.menu.getValue();},setValue:function(value){this.menu.setValue(value);},isActivatable:function(){var values=this.getValue(),key;for(key in values){if(values[key]!==undefined){return true;}}
return false;},getSerialArgs:function(){var key,args=[],values=this.menu.getValue();for(key in values){args.push({type:'numeric',comparison:key,value:values[key]});}
return args;},validateRecord:function(record){var val=record.get(this.dataIndex),values=this.getValue(),isNumber=Ext.isNumber;if(isNumber(values.eq)&&val!=values.eq){return false;}
if(isNumber(values.lt)&&val>=values.lt){return false;}
if(isNumber(values.gt)&&val<=values.gt){return false;}
return true;}});;Ext.define('Ext.ux.grid.filter.DateFilter',{extend:'Ext.ux.grid.filter.Filter',alias:'gridfilter.date',uses:['Ext.picker.Date','Ext.menu.Menu'],afterText:'After',beforeText:'Before',compareMap:{before:'lt',after:'gt',on:'eq'},dateFormat:'m/d/Y',menuItems:['before','after','-','on'],menuItemCfgs:{selectOnFocus:true,width:125},onText:'On',pickerOpts:{},init:function(config){var me=this,pickerCfg,i,len,item,cfg;pickerCfg=Ext.apply(me.pickerOpts,{xtype:'datepicker',minDate:me.minDate,maxDate:me.maxDate,format:me.dateFormat,listeners:{scope:me,select:me.onMenuSelect}});me.fields={};for(i=0,len=me.menuItems.length;i<len;i++){item=me.menuItems[i];if(item!=='-'){cfg={itemId:'range-'+item,text:me[item+'Text'],menu:Ext.create('Ext.menu.Menu',{plain:true,items:[Ext.apply(pickerCfg,{itemId:item})]}),listeners:{scope:me,checkchange:me.onCheckChange}};item=me.fields[item]=Ext.create('Ext.menu.CheckItem',cfg);}
me.menu.add(item);}
me.values={};},onCheckChange:function(item,checked){var me=this,picker=item.menu.items.first(),itemId=picker.itemId,values=me.values;if(checked){values[itemId]=picker.getValue();}else{delete values[itemId];}
me.setActive(me.isActivatable());me.fireEvent('update',me);},onInputKeyUp:function(field,e){var k=e.getKey();if(k==e.RETURN&&field.isValid()){e.stopEvent();this.menu.hide();}},onMenuSelect:function(picker,date){var fields=this.fields,field=this.fields[picker.itemId];field.setChecked(true);if(field==fields.on){fields.before.setChecked(false,true);fields.after.setChecked(false,true);}else{fields.on.setChecked(false,true);if(field==fields.after&&this.getFieldValue('before')<date){fields.before.setChecked(false,true);}else if(field==fields.before&&this.getFieldValue('after')>date){fields.after.setChecked(false,true);}}
this.values[picker.itemId]=date;this.fireEvent('update',this);picker.up('menu').hide();},getValue:function(){var key,result={};for(key in this.fields){if(this.fields[key].checked){result[key]=this.getFieldValue(key);}}
return result;},setValue:function(value,preserve){var key;for(key in this.fields){if(value[key]){this.getPicker(key).setValue(value[key]);this.fields[key].setChecked(true);}else if(!preserve){this.fields[key].setChecked(false);}}
this.fireEvent('update',this);},isActivatable:function(){var key;for(key in this.fields){if(this.fields[key].checked){return true;}}
return false;},getSerialArgs:function(){var args=[];for(var key in this.fields){if(this.fields[key].checked){args.push({type:'date',comparison:this.compareMap[key],value:Ext.Date.format(this.getFieldValue(key),this.dateFormat)});}}
return args;},getFieldValue:function(item){return this.values[item];},getPicker:function(item){return this.fields[item].menu.items.first();},validateRecord:function(record){var key,pickerValue,val=record.get(this.dataIndex),clearTime=Ext.Date.clearTime;if(!Ext.isDate(val)){return false;}
val=clearTime(val,true).getTime();for(key in this.fields){if(this.fields[key].checked){pickerValue=clearTime(this.getFieldValue(key),true).getTime();if(key=='before'&&pickerValue<=val){return false;}
if(key=='after'&&pickerValue>=val){return false;}
if(key=='on'&&pickerValue!=val){return false;}}}
return true;}});;Ext.define('Ext.ux.grid.filter.DateTimeFilter',{extend:'Ext.ux.grid.filter.DateFilter',alias:'gridfilter.datetime',dateDefaults:{xtype:'datepicker',format:'m/d/Y'},timeDefaults:{xtype:'timepicker',width:100,height:200,format:'g:i A'},dockDefaults:{dock:'top',buttonText:'Filter'},selectDateToFilter:true,positionDatepickerFirst:true,reTime:/\s(am|pm)/i,addTimeSelection:function(date,timepicker){var me=this,selection=timepicker.getSelectionModel().getSelection(),time,len,fn,val,i=0,arr=[],timeFns=['setHours','setMinutes','setSeconds','setMilliseconds'];if(selection.length){time=selection[0].get('disp');arr=time.replace(me.reTime,'').split(':');for(len=arr.length;i<len;i++){fn=timeFns[i];val=arr[i];if(val){date[fn](parseInt(val,10));}}}
return date;},init:function(config){var me=this,dateCfg=Ext.applyIf(me.date||{},me.dateDefaults),timeCfg=Ext.applyIf(me.time||{},me.timeDefaults),dockCfg=me.dock,defaultListeners={click:{scope:me,click:me.onMenuSelect},select:{scope:me,select:me.onMenuSelect}},pickerCtnCfg,i,len,item,cfg,items=[dateCfg,timeCfg],datepickerPosition=0;if(!me.positionDatepickerFirst){items=items.reverse();datepickerPosition=1;}
pickerCtnCfg=Ext.apply(me.pickerOpts,{xtype:!dockCfg?'container':'panel',layout:'hbox',items:items});if(!dockCfg){if(me.selectDateToFilter){dateCfg.listeners=defaultListeners.select;}else{timeCfg.listeners=defaultListeners.select;}}else if(dockCfg){me.selectDateToFilter=null;if(dockCfg.dockedItems){pickerCtnCfg.dockedItems=dockCfg.dockedItems;pickerCtnCfg.dockedItems.items[dockCfg.bindToItem||0].listeners=defaultListeners.click;}else{if(Ext.isBoolean(dockCfg)){dockCfg={};}
dockCfg=Ext.applyIf(dockCfg,me.dockDefaults);pickerCtnCfg.dockedItems={xtype:'toolbar',dock:dockCfg.dock,items:[{xtype:'button',text:dockCfg.buttonText,flex:1,listeners:defaultListeners.click}]};}}
me.fields={};for(i=0,len=me.menuItems.length;i<len;i++){item=me.menuItems[i];if(item!=='-'){pickerCtnCfg.items[datepickerPosition].itemId=item;cfg={itemId:item,text:me[item+'Text'],menu:Ext.create('Ext.menu.Menu',{items:pickerCtnCfg}),listeners:{scope:me,checkchange:me.onCheckChange}};item=me.fields[item]=Ext.create('Ext.menu.CheckItem',cfg);}
me.menu.add(item);}
me.values={};},onCheckChange:function(item,checked){var me=this,menu=item.menu,timepicker=menu.down('timepicker'),datepicker=menu.down('datepicker'),itemId=datepicker.itemId,values=me.values;if(checked){values[itemId]=me.addTimeSelection(datepicker.value,timepicker);}else{delete values[itemId];}
me.setActive(me.isActivatable());me.fireEvent('update',me);},onMenuSelect:function(picker,date){var me=this,menu=me.menu,fields=me.fields,field;if(me.dock){picker=menu.getFocusEl().down('datepicker');}
field=me.fields[picker.itemId];field.setChecked(true);if(field==fields.on){fields.before.setChecked(false,true);fields.after.setChecked(false,true);}else{fields.on.setChecked(false,true);if(field==fields.after&&me.getFieldValue('before')<date){fields.before.setChecked(false,true);}else if(field==fields.before&&me.getFieldValue('after')>date){fields.after.setChecked(false,true);}}
me.fireEvent('update',me);picker.ownerCt.ownerCt.hide();},getSerialArgs:function(){var me=this,key,fields=me.fields,args=[],date=Ext.apply(me.dateDefaults,me.date||{}),time=Ext.apply(me.timeDefaults,me.time||{});for(key in fields){if(fields[key].checked){args.push({type:'datetime',comparison:me.compareMap[key],value:Ext.Date.format(me.getFieldValue(key),date.format+' '+time.format)});}}
return args;},setValue:function(value,preserve){var me=this,fields=me.fields,key,val,datepicker;for(key in fields){val=value[key];if(val){datepicker=me.menu.down('datepicker[itemId="'+key+'"]');datepicker.update(val);datepicker.value=val;fields[key].setChecked(true);}else if(!preserve){fields[key].setChecked(false);}}
me.fireEvent('update',me);},validateRecord:function(record){var me=this,key,pickerValue,val=record.get(me.dataIndex);if(!Ext.isDate(val)){return false;}
val=val.getTime();for(key in me.fields){if(me.fields[key].checked){pickerValue=me.getFieldValue(key).getTime();if(key=='before'&&pickerValue<=val){return false;}
if(key=='after'&&pickerValue>=val){return false;}
if(key=='on'&&pickerValue!=val){return false;}}}
return true;}});;Ext.define('Ext.ux.grid.filter.StringFilter',{extend:'Ext.ux.grid.filter.Filter',alias:'gridfilter.string',iconCls:'ux-gridfilter-text-icon',emptyText:'Enter Filter Text...',selectOnFocus:true,width:125,init:function(config){Ext.applyIf(config,{enableKeyEvents:true,labelCls:'ux-rangemenu-icon '+this.iconCls,hideEmptyLabel:false,labelSeparator:'',labelWidth:29,listeners:{scope:this,keyup:this.onInputKeyUp,el:{click:function(e){e.stopPropagation();}}}});this.inputItem=Ext.create('Ext.form.field.Text',config);this.menu.add(this.inputItem);this.menu.showSeparator=false;this.updateTask=Ext.create('Ext.util.DelayedTask',this.fireUpdate,this);},getValue:function(){return this.inputItem.getValue();},setValue:function(value){this.inputItem.setValue(value);this.fireEvent('update',this);},isActivatable:function(){return this.inputItem.getValue().length>0;},getSerialArgs:function(){return{type:'string',value:this.getValue()};},validateRecord:function(record){var val=record.get(this.dataIndex);if(typeof val!='string'){return(this.getValue().length===0);}
return val.toLowerCase().indexOf(this.getValue().toLowerCase())>-1;},onInputKeyUp:function(field,e){var k=e.getKey();if(k==e.RETURN&&field.isValid()){e.stopEvent();this.menu.hide();return;}
this.updateTask.delay(this.updateBuffer);}});;Ext.define('Ext.ux.grid.FiltersFeature',{extend:'Ext.grid.feature.Feature',alias:'feature.filters',uses:['Ext.ux.grid.menu.ListMenu','Ext.ux.grid.menu.RangeMenu','Ext.ux.grid.filter.BooleanFilter','Ext.ux.grid.filter.DateFilter','Ext.ux.grid.filter.DateTimeFilter','Ext.ux.grid.filter.ListFilter','Ext.ux.grid.filter.NumericFilter','Ext.ux.grid.filter.StringFilter'],autoReload:true,filterCls:'ux-filtered-column',local:false,menuFilterText:'Filters',paramPrefix:'filter',showMenu:true,stateId:undefined,updateBuffer:500,hasFeatureEvent:false,constructor:function(config){var me=this;me.callParent(arguments);me.deferredUpdate=Ext.create('Ext.util.DelayedTask',me.reload,me);me.filters=me.createFiltersCollection();me.filterConfigs=config.filters;},init:function(grid){var me=this,view=me.view,headerCt=view.headerCt;me.bindStore(view.getStore(),true);headerCt.on('menucreate',me.onMenuCreate,me);view.on('refresh',me.onRefresh,me);grid.on({scope:me,beforestaterestore:me.applyState,beforestatesave:me.saveState,beforedestroy:me.destroy});grid.filters=me;grid.addEvents('filterupdate');me.createFilters();},createFiltersCollection:function(){return Ext.create('Ext.util.MixedCollection',false,function(o){return o?o.dataIndex:null;});},createFilters:function(){var me=this,hadFilters=me.filters.getCount(),grid=me.getGridPanel(),filters=me.createFiltersCollection(),model=grid.store.model,fields=model.prototype.fields,field,filter,state;if(hadFilters){state={};me.saveState(null,state);}
function add(dataIndex,config,filterable){if(dataIndex&&(filterable||config)){field=fields.get(dataIndex);filter={dataIndex:dataIndex,type:(field&&field.type&&field.type.type)||'auto'};if(Ext.isObject(config)){Ext.apply(filter,config);}
filters.replace(filter);}}
Ext.Array.each(me.filterConfigs,function(filterConfig){add(filterConfig.dataIndex,filterConfig);});Ext.Array.each(grid.columnManager.getColumns(),function(column){if(column.filterable===false){filters.removeAtKey(column.dataIndex);}else{add(column.dataIndex,column.filter,column.filterable);}});me.removeAll();if(filters.items){me.initializeFilters(filters.items);}
if(hadFilters){me.applyState(null,state);}},initializeFilters:function(filters){var me=this,filtersLength=filters.length,i,filter,FilterClass;for(i=0;i<filtersLength;i++){filter=filters[i];if(filter){FilterClass=me.getFilterClass(filter.type);filter=filter.menu?filter:new FilterClass(Ext.apply({grid:me.grid},filter));me.filters.add(filter);Ext.util.Observable.capture(filter,me.onStateChange,me);}}},onMenuCreate:function(headerCt,menu){var me=this;if(me.filtersNeedReCreating){me.createFilters();me.filtersNeedReCreating=false;}
menu.on({beforeshow:me.onMenuBeforeShow,destroy:me.onMenuDestroy,scope:me});},onMenuDestroy:function(){this.filtersNeedReCreating=true;},onMenuBeforeShow:function(menu){var me=this,menuItem,filter;if(me.showMenu){menuItem=me.menuItem;if(!menuItem||menuItem.isDestroyed){me.createMenuItem(menu);menuItem=me.menuItem;}
filter=me.getMenuFilter();if(filter){menuItem.setMenu(filter.menu,false);menuItem.setChecked(filter.active);menuItem.setDisabled(filter.disabled===true);}
menuItem.setVisible(!!filter);me.sep.setVisible(!!filter);}},createMenuItem:function(menu){var me=this;me.sep=menu.add('-');me.menuItem=menu.add({checked:false,itemId:'filters',text:me.menuFilterText,listeners:{scope:me,checkchange:me.onCheckChange,beforecheckchange:me.onBeforeCheck}});},getGridPanel:function(){return this.grid;},applyState:function(grid,state){var me=this,key,filter;me.applyingState=true;me.clearFilters();if(state.filters){for(key in state.filters){if(state.filters.hasOwnProperty(key)){filter=me.filters.get(key);if(filter){filter.setValue(state.filters[key]);filter.setActive(true);}}}}
me.deferredUpdate.cancel();if(me.local){me.reload();}
delete me.applyingState;delete state.filters;},saveState:function(grid,state){var filters={};this.filters.each(function(filter){if(filter.active){filters[filter.dataIndex]=filter.getValue();}});return(state.filters=filters);},destroy:function(){var me=this;Ext.destroyMembers(me,'menuItem','sep');me.removeAll();me.clearListeners();},removeAll:function(){if(this.filters){Ext.destroy.apply(Ext,this.filters.items);this.filters.clear();}},bindStore:function(store){var me=this;if(me.store&&me.storeListeners){me.store.un(me.storeListeners);}
if(store){me.storeListeners={scope:me};if(me.local){me.storeListeners.load=me.onLoad;}else{me.storeListeners['before'+(store.buffered?'prefetch':'load')]=me.onBeforeLoad;}
store.on(me.storeListeners);}else{delete me.storeListeners;}
me.store=store;},getMenuFilter:function(){var header=this.view.headerCt.getMenu().activeHeader;return header?this.filters.get(header.dataIndex):null;},onCheckChange:function(item,value){this.getMenuFilter().setActive(value);},onBeforeCheck:function(check,value){return!value||this.getMenuFilter().isActivatable();},onStateChange:function(event,filter){if(event!=='serialize'){var me=this,grid=me.getGridPanel();if(filter==me.getMenuFilter()){me.menuItem.setChecked(filter.active,false);}
if((me.autoReload||me.local)&&!me.applyingState){me.deferredUpdate.delay(me.updateBuffer);}
me.updateColumnHeadings();if(!me.applyingState){grid.saveState();}
grid.fireEvent('filterupdate',me,filter);}},onBeforeLoad:function(store,options){var params;options.params=options.params||{};this.cleanParams(options.params);params=this.buildQuery(this.getFilterData());if(store.getProxy().isSynchronous&&this.hasActiveFilter()){options.filters=[new Ext.util.Filter({filterFn:this.getRecordFilter()})];}
Ext.apply(options.params,params);},onLoad:function(store){if(this.filters.length){store.filterBy(this.getRecordFilter());}},onRefresh:function(){this.updateColumnHeadings();},updateColumnHeadings:function(){var me=this,headerCt=me.view.headerCt;if(headerCt){headerCt.items.each(function(header){var filter=me.getFilter(header.dataIndex);header[filter&&filter.active?'addCls':'removeCls'](me.filterCls);});}},reload:function(){var me=this,store=me.view.getStore();if(me.local){store.clearFilter(true);store.filterBy(me.getRecordFilter());store.sort();}else{me.deferredUpdate.cancel();if(store.buffered){store.data.clear();}
store.loadPage(1);}},getRecordFilter:function(){var f=[],len,i,lockingPartner=this.lockingPartner;this.filters.each(function(filter){if(filter.active){f.push(filter);}});if(lockingPartner){lockingPartner.filters.each(function(filter){if(filter.active){f.push(filter);}});}
len=f.length;return function(record){for(i=0;i<len;i++){if(!f[i].validateRecord(record)){return false;}}
return true;};},hasActiveFilter:function(){var result=false;this.filters.each(function(filter){if(filter.active){result=true;return false;}});return result;},addFilter:function(config){var me=this,columns=me.getGridPanel().columnManager.getColumns(),i,columnsLength,column,filtersLength,filter;for(i=0,columnsLength=columns.length;i<columnsLength;i++){column=columns[i];if(column.dataIndex===config.dataIndex){column.filter=config;}}
if(me.view.headerCt.menu){me.createFilters();}else{me.view.headerCt.getMenu();}
for(i=0,filtersLength=me.filters.items.length;i<filtersLength;i++){filter=me.filters.items[i];if(filter.dataIndex===config.dataIndex){return filter;}}},addFilters:function(filters){if(filters){var me=this,i,filtersLength;for(i=0,filtersLength=filters.length;i<filtersLength;i++){me.addFilter(filters[i]);}}},getFilter:function(dataIndex){return this.filters.get(dataIndex);},clearFilters:function(){this.filters.each(function(filter){filter.setActive(false);});},getFilterItems:function(){var me=this;if(me.lockingPartner){return me.filters.items.concat(me.lockingPartner.filters.items);}
return me.filters.items;},getFilterData:function(){var items=this.getFilterItems(),filters=[],n,nlen,item,d,i,len;for(n=0,nlen=items.length;n<nlen;n++){item=items[n];if(item.active){d=[].concat(item.serialize());for(i=0,len=d.length;i<len;i++){filters.push({field:item.dataIndex,data:d[i]});}}}
return filters;},buildQuery:function(filters){var p={},i,f,root,dataPrefix,key,tmp,len=filters.length;if(!this.encode){for(i=0;i<len;i++){f=filters[i];root=[this.paramPrefix,'[',i,']'].join('');p[root+'[field]']=f.field;dataPrefix=root+'[data]';for(key in f.data){p[[dataPrefix,'[',key,']'].join('')]=f.data[key];}}}else{tmp=[];for(i=0;i<len;i++){f=filters[i];tmp.push(Ext.apply({},{field:f.field},f.data));}
if(tmp.length>0){p[this.paramPrefix]=Ext.JSON.encode(tmp);}}
return p;},cleanParams:function(p){if(this.encode){delete p[this.paramPrefix];}else{var regex,key;regex=new RegExp('^'+this.paramPrefix+'\[[0-9]+\]');for(key in p){if(regex.test(key)){delete p[key];}}}},getFilterClass:function(type){switch(type){case'auto':type='string';break;case'int':case'float':type='numeric';break;case'bool':type='boolean';break;}
return Ext.ClassManager.getByAlias('gridfilter.'+type);}});;Ext.define('Ext.ux.grid.menu.ListMenu',{extend:'Ext.menu.Menu',idField:'id',labelField:'text',loadingText:'Loading...',loadOnShow:true,single:false,plain:true,constructor:function(cfg){var me=this,gridStore;me.selected=[];me.addEvents('checkchange');me.callParent(arguments);gridStore=me.grid.store;if(me.store){me.add({text:me.loadingText,iconCls:'loading-indicator'});me.store.on('load',me.onLoad,me);}else if(gridStore.data.length){me.createMenuStore();}else{gridStore.on('load',me.createMenuStore,me,{single:true});}},destroy:function(){var me=this,store=me.store;if(store){if(me.autoStore){store.destroyStore();}else{store.un('unload',me.onLoad,me);}}
me.callParent();},show:function(){var me=this;if(me.loadOnShow&&!me.loaded&&!me.store.loading){me.store.load();}
me.callParent();},onLoad:function(store,records){var me=this,gid,itemValue,i,len,listeners={checkchange:me.checkChange,scope:me};Ext.suspendLayouts();me.removeAll(true);gid=me.single?Ext.id():null;for(i=0,len=records.length;i<len;i++){itemValue=records[i].get(me.idField);me.add(Ext.create('Ext.menu.CheckItem',{text:records[i].get(me.labelField),group:gid,checked:Ext.Array.contains(me.selected,itemValue),hideOnClick:false,value:itemValue,listeners:listeners}));}
me.loaded=true;Ext.resumeLayouts(true);me.fireEvent('load',me,records);},createMenuStore:function(){var me=this,options=[],i,len,value;me.options=me.grid.store.collect(me.dataIndex,false,true);for(i=0,len=me.options.length;i<len;i++){value=me.options[i];switch(Ext.type(value)){case'array':options.push(value);break;case'object':options.push([value[me.idField],value[me.labelField]]);break;default:if(value!=null){options.push([value,value]);}}}
me.store=Ext.create('Ext.data.ArrayStore',{fields:[me.idField,me.labelField],data:options,listeners:{load:me.onLoad,scope:me}});me.loaded=true;me.autoStore=true;},getSelected:function(){return this.selected;},setSelected:function(value){value=this.selected=[].concat(value);if(this.loaded){this.items.each(function(item){item.setChecked(false,true);for(var i=0,len=value.length;i<len;i++){if(item.value==value[i]){item.setChecked(true,true);}}});}},checkChange:function(item,checked){var value=[];this.items.each(function(item){if(item.checked){value.push(item.value);}});this.selected=value;this.fireEvent('checkchange',item,checked);}});;Ext.define('Ext.ux.grid.menu.RangeMenu',{extend:'Ext.menu.Menu',fieldCls:'Ext.form.field.Number',itemIconCls:{gt:'ux-rangemenu-gt',lt:'ux-rangemenu-lt',eq:'ux-rangemenu-eq'},fieldLabels:{gt:'Greater Than',lt:'Less Than',eq:'Equal To'},menuItemCfgs:{emptyText:'Enter Number...',selectOnFocus:false,width:155},menuItems:['lt','gt','-','eq'],plain:true,constructor:function(config){var me=this,fields,fieldCfg,i,len,item,cfg,Cls;me.callParent(arguments);fields=me.fields=me.fields||{};fieldCfg=me.fieldCfg=me.fieldCfg||{};me.addEvents('update');me.updateTask=Ext.create('Ext.util.DelayedTask',me.fireUpdate,me);for(i=0,len=me.menuItems.length;i<len;i++){item=me.menuItems[i];if(item!=='-'){cfg={itemId:'range-'+item,enableKeyEvents:true,hideEmptyLabel:false,labelCls:'ux-rangemenu-icon '+me.itemIconCls[item],labelSeparator:'',labelWidth:29,listeners:{scope:me,change:me.onInputChange,keyup:me.onInputKeyUp,el:{click:this.stopFn}},activate:Ext.emptyFn,deactivate:Ext.emptyFn};Ext.apply(cfg,Ext.applyIf(fields[item]||{},fieldCfg[item]),me.menuItemCfgs);Cls=cfg.fieldCls||me.fieldCls;item=fields[item]=Ext.create(Cls,cfg);}
me.add(item);}},stopFn:function(e){e.stopPropagation();},fireUpdate:function(){this.fireEvent('update',this);},getValue:function(){var result={},fields=this.fields,key,field;for(key in fields){if(fields.hasOwnProperty(key)){field=fields[key];if(field.isValid()&&field.getValue()!==null){result[key]=field.getValue();}}}
return result;},setValue:function(data){var me=this,fields=me.fields,key,field;for(key in fields){if(fields.hasOwnProperty(key)){field=fields[key];field.suspendEvents();field.setValue(key in data?data[key]:'');field.resumeEvents();}}
me.fireEvent('update',me);},onInputKeyUp:function(field,e){if(e.getKey()===e.RETURN&&field.isValid()){e.stopEvent();this.hide();}},onInputChange:function(field){var me=this,fields=me.fields,eq=fields.eq,gt=fields.gt,lt=fields.lt;if(field==eq){if(gt){gt.setValue(null);}
if(lt){lt.setValue(null);}}
else{eq.setValue(null);}
this.updateTask.delay(this.updateBuffer);}});;Ext.define('Ext.ux.form.NumericField',{extend:'Ext.form.field.Number',alias:'widget.numericfield',currencySymbol:null,currencySymbolPos:'right',useThousandSeparator:true,thousandSeparator:',',alwaysDisplayDecimals:false,fieldStyle:'text-align: right;',initComponent:function(){if(this.useThousandSeparator&&this.decimalSeparator==','&&this.thousandSeparator==',')
this.thousandSeparator='.';else
if(this.allowDecimals&&this.thousandSeparator=='.'&&this.decimalSeparator=='.')
this.decimalSeparator=',';this.callParent(arguments);},setValue:function(value){Ext.ux.form.NumericField.superclass.setValue.call(this,value!=null?value.toString().replace('.',this.decimalSeparator):value);this.setRawValue(this.getFormattedValue(this.getValue()));},getFormattedValue:function(value){if(Ext.isEmpty(value)||!this.hasFormat())
return value;else
{var neg=null;value=(neg=value<0)?value*-1:value;value=this.allowDecimals&&this.alwaysDisplayDecimals?value.toFixed(this.decimalPrecision):value;if(this.useThousandSeparator)
{if(this.useThousandSeparator&&Ext.isEmpty(this.thousandSeparator))
throw('NumberFormatException: invalid thousandSeparator, property must has a valid character.');if(this.thousandSeparator==this.decimalSeparator)
throw('NumberFormatException: invalid  thousandSeparator, thousand separator must be different from  decimalSeparator.');value=value.toString();var ps=value.split('.');ps[1]=ps[1]?ps[1]:null;var whole=ps[0];var r=/(\d+)(\d{3})/;var ts=this.thousandSeparator;while(r.test(whole))
whole=whole.replace(r,'$1'+ts+'$2');value=whole+(ps[1]?this.decimalSeparator+ps[1]:'');}
if(this.currencySymbolPos=='right'){return Ext.String.format('{0}{1}{2}',(neg?'-':''),value,(Ext.isEmpty(this.currencySymbol)?'':' '+this.currencySymbol));}else{return Ext.String.format('{0}{1}{2}',(neg?'-':''),(Ext.isEmpty(this.currencySymbol)?'':this.currencySymbol+'  '),value);}}},parseValue:function(value){return Ext.ux.form.NumericField.superclass.parseValue.call(this,this.removeFormat(value));},removeFormat:function(value){if(Ext.isEmpty(value)||!this.hasFormat())
return value;else
{if(this.currencySymbolPos=='right'){value=value.toString().replace(' '+this.currencySymbol,'');}else{value=value.toString().replace(this.currencySymbol+' ','');}
value=this.useThousandSeparator?value.replace(new RegExp('['+this.thousandSeparator+']','g'),''):value;return value;}},getErrors:function(value){return Ext.ux.form.NumericField.superclass.getErrors.call(this,this.removeFormat(value));},hasFormat:function(){return this.decimalSeparator!='.'||(this.useThousandSeparator==true&&this.getRawValue()!=null)||!Ext.isEmpty(this.currencySymbol)||this.alwaysDisplayDecimals;},onFocus:function(){this.setRawValue(this.removeFormat(this.getRawValue()));this.callParent(arguments);},processRawValue:function(value){return this.removeFormat(value);}});